# 開発フロー・実装機能・使用技術まとめ

## 1. 要件整理・仕様策定
- 要件ヒアリング、補足事項の明確化
- API仕様書（OpenAPI/Swagger）作成
- ER図・シーケンス図の作成

## 2. 技術選定・環境構築
- バックエンド: Django, Django REST Framework, GeoDjango, Channels
- 認証: JWT（djangorestframework-simplejwt）
- DB: PostgreSQL + PostGIS
- キャッシュ・PubSub: Redis
- フロントエンド: Leaflet.js または Mapbox GL JS
- インフラ: Docker, Kubernetes, AWS ECS/Beanstalk, Ingress
- CI/CD: GitHub Actions など

## 3. 実装機能一覧

### バックエンド
- 投稿API（取得/作成/更新/削除, JWT認証, ステータスコード明示）
- 投稿の位置情報保存（SRID統一, WGS84推奨）
- 距離検索（半径/kNN, GiSTインデックス）
- WebSocketリアルタイム更新（関心エリア単位のチャネル管理, Redis連携）
- トークンリフレッシュ/失効
- 管理画面（辞書編集, バージョン管理, 差分プレビュー）
- 感情スコア付与（-1.0〜+1.0）
- ホットスポット検出（カーネル密度推定等, 統計アルゴリズム実装）
- プロフィール機能（OAuth, メール認証）
- タグ管理（動的追加, 管理画面対応）
- キャッシュ（GeoDjangoクエリ/レスポンスキャッシュ分離）
- レート制限, セキュリティ対策（XSS/CSRF, セキュアヘッダー）

### フロントエンド
- 日本地図上プロット（大量ポイント高速描画, WebGL）
- ホットスポット色分け・閾値定義
- タイムライン/履歴表示（無限スクロール, ページネーション）
- 多言語対応（gettext）

## 4. 運用・監視・テスト
- ログ収集（ELK, Grafana Loki）
- メトリクス監視（Prometheus, Grafana）
- アラート設計
- 負荷試験（Locust, JMeter）
- 単体テスト（pytest, factory_boy）
- 統合テスト（Playwright, Cypress）

## 5. スケーラビリティ・運用
- LB＋複数インスタンス（Kubernetes, ECS等）
- Redis PUB/SUB, チャンネルシャーディング
- DBクラスター, マテリアライズドビュー
- SNS連携（Twitter API v2）

## 6. 開発プロセス
1. 要件定義・仕様書作成
2. ER図・API設計
3. 環境構築（Docker, DB, Redis, etc.）
4. バックエンドAPI実装・テスト
5. WebSocket/リアルタイム機能実装
6. 管理画面・辞書機能実装
7. フロントエンド地図・UI実装
8. セキュリティ・負荷試験・監視設定
9. CI/CD・自動テスト導入
10. 本番リリース・運用
